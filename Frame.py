#include:utf-8
"""
Author : Horairy Hakim
email : hakim.horairy@telecom-sudparis.eu
Tel : 07 69 22 52 55
"""
import numpy
import os
import json
import readchar
import sys
import time


class Frame:

	def __init__(self, frameID):

		self.frameID = frameID

		self.getMetaData()  # generate 3 attributs

		self.getTerminalSize() # generate 2 attributs 
		
		self.positionLinksOnLogicalGrid = {} # this dict is cleaned and filled during the execution of "generateLogicalGrid".
		self.positionCursor = None #Its value is instantiated the first time the positionLinksOnLogicalGrid is filled.

		self.logicalGrid = self.generateLogicalGrid() 
		self.graphicalGrid = self.generateGraphicalGrid()

################################################################################################################################################		
##############################                Meta-data Frame       ############################################################################
################################################################################################################################################
	

	def getMetaData(self):
		"""This function allows you to get the information needed to build the frame.
			It instantiate 3 attributes for the frame class :
					metaData : it's the dictionary that is generated by the user when 
							   he uses the framework to generate a frame."""

		with open("metaDataFiles/metadataFrameID{0}".format(self.frameID)) as jsonFile:
			self.metaData = json.load(jsonFile)
		
		self.numberLinksToFrames = len(self.metaData["links"])
		self.numberButtons = len(self.metaData["buttons"])



################################################################################################################################################

################################################################################################################################################
###############################   				Logics 				############################################################################
################################################################################################################################################

	
	def getTerminalSize(self):
		"""Instantiate 2 attributes for the frame class : 
					The number of rows and columns of the frame"""
		rows, columns = os.popen('stty size', 'r').read().split()
		self.NumberLines = int(rows) - 4
		self.numberColumns = int(columns)

	def getTerminalCenterPosition(self):
		return [self.NumberLines//2, self.numberColumns//2]

	def getTermialBottomLeftPosition(self):
		return [3*(self.NumberLines//4), self.numberColumns//4]

	
	def generateEmptyLogicalGrid(self):
		
		emptyLogicalGrid = numpy.ones(shape=(self.NumberLines, self.numberColumns), dtype=int)
		emptyLogicalGrid[1:-1, 1:-1] = numpy.zeros(shape=(self.NumberLines-2, self.numberColumns-2), dtype=int)
		
		return emptyLogicalGrid


	def addLinksOnLogicalGrid(self, logicalGrid, position="center"):

		self.positionLinksOnLogicalGrid = {}

		if position == "center":
			position = self.getTerminalCenterPosition()
			position[0] -= (self.numberLinksToFrames - 1)

			for indexLink in range(self.numberLinksToFrames):

				if self.positionCursor == None:
					logicalGrid[position[0], position[1] - 2] = 4
					self.positionCursor = [0, [position[0], position[1] - 2]]

				logicalGrid[position[0], position[1]] = 2
				self.positionLinksOnLogicalGrid[str(indexLink)] = [position[0], position[1] - 2]
				position[0] += 2

		return logicalGrid

	def modifyPostionCursor(self, direction):
		self.logicalGrid[self.positionCursor[1][0], self.positionCursor[1][1]] = 0
		
		if direction == "up":
			
			if self.positionCursor[0] == 0:
				self.positionCursor[0] = self.numberLinksToFrames - 1
					
			else :
				self.positionCursor[0] -= 1


		elif direction == "down":
			
			if self.positionCursor[0] == self.numberLinksToFrames -1:
				self.positionCursor[0] = 0
			else :
				self.positionCursor[0] += 1

		
		self.positionCursor[1] = self.positionLinksOnLogicalGrid[ str(self.positionCursor[0]) ]

		self.logicalGrid[self.positionCursor[1][0], self.positionCursor[1][1]] = 4		



	def addButtonsOnLogicalGrid(self, logicalGrid, position="bottomleft"):

		if position == "bottomleft":
			position = self.getTermialBottomLeftPosition()
			position[0] -= (self.numberButtons -1)
			
			for indexButton in range(self.numberButtons):
				logicalGrid[position[0], position[1]] = 3
				position[0] += 2

		return logicalGrid



	def generateLogicalGrid(self):

		emptyLogicalGrid = self.generateEmptyLogicalGrid()
		logicalGridWithLinks = self.addLinksOnLogicalGrid(logicalGrid=emptyLogicalGrid)
		logicalGrid = self.addButtonsOnLogicalGrid(logicalGrid=logicalGridWithLinks)

		return logicalGrid
		

	def quitTUI(self):
		os.system("clear")
		sys.exit()

#######################################################################################################################################


#######################################################################################################################################
##############################					Graphics			###################################################################
#######################################################################################################################################

	def command(self):


		inputCommand = readchar.readkey()

		if inputCommand == readchar.key.UP:
			self.modifyPostionCursor(direction="up")

		elif inputCommand == readchar.key.DOWN:
			self.modifyPostionCursor(direction="down")

		elif inputCommand == self.metaData["buttons"]["-1"][0]  :
			self.quitTUI()

		
#######################################################################################################################################



#######################################################################################################################################
##############################					Graphics			###################################################################
#######################################################################################################################################
	
	def generateGraphicalGrid(self):

		listeCharacs = [" ", "X", None, None, ">"]
		graphicalGrid = ""
		
		doNotAddAnything = 0
		counterLinks = 0
		counterButtons = 0

		for logicLine in self.logicalGrid:
			for logicValue in logicLine:
				
				if doNotAddAnything != 0:
					doNotAddAnything -= 1
					pass
				
				elif logicValue == 0 or logicValue == 1 or logicValue == 4:
					graphicalGrid += listeCharacs[logicValue]
					
				elif logicValue == 2:
					graphicalGrid += self.metaData["links"][str(counterLinks)][1]
					doNotAddAnything += len(self.metaData["links"][str(counterLinks)][1]) - 1
					counterLinks += 1
				
				elif logicValue ==3:
					if counterButtons < self.numberButtons - 1:

						graphicalGrid = graphicalGrid[:-6] + "[{}] : ".format(self.metaData["buttons"][str(counterButtons)][0])
						graphicalGrid += self.metaData["buttons"][str(counterButtons)][1]
						doNotAddAnything += len(self.metaData["buttons"][str(counterButtons)][1]) - 1
						counterButtons += 1

					elif counterButtons == self.numberButtons - 1 :
						counterButtons = "-1"

						graphicalGrid = graphicalGrid[:-6] + "[{}] : ".format(self.metaData["buttons"][counterButtons][0])
						graphicalGrid += self.metaData["buttons"][counterButtons][1]
						doNotAddAnything += len(self.metaData["buttons"][counterButtons][1]) - 1
						counterButtons = self.numberButtons - 1

				
			graphicalGrid += "\n"
		
		return graphicalGrid 

	def ShowGraphicalGrid(self):
		self.graphicalGrid = self.generateGraphicalGrid()
		os.system("clear")
		print(self.graphicalGrid)

		return None


##########################################################################################################################################
